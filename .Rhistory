dataEcdc<-dataEcdc[,-2]
dataEcdc<-dataEcdc %>% dplyr::filter(dateRep>="2020-03-01")
rm(dataMsal)
rm(dataMsalAmba)
rm(dataMsalAmbaPBA)
rm(dataMsalARG)
rm(dataMsal_6_756)
rm(dataMsal_6_826)
#   dataEcdc$new_deaths[6:nrow(dataEcdc)-6]<-rollmean(dataEcdc$new_deaths,7)
} else
{
dataEcdc <- read.csv("dataEcdc.csv", fileEncoding = "UTF-8-BOM")
dataEcdc <- data.frame(countryterritoryCode=dataEcdc$iso_code,
dateRep=as.Date(dataEcdc$date),
cases=dataEcdc$new_cases,
deaths=dataEcdc$new_deaths)
dataEcdc[is.na(dataEcdc)] = 0
dataEcdc<-dataEcdc %>% filter(dateRep<=Sys.Date())
dataEcdc <- dataEcdc %>% filter(countryterritoryCode==input$pais)
dataEcdc <- dataEcdc %>% dplyr::select(fecha=dateRep,countryterritoryCode, cases, deaths)
seqFecha<-seq(min(as.Date(dataEcdc$fecha)),max(as.Date(dataEcdc$fecha)), by=1 )
seqFecha<-data.frame(secuencia=seqFecha)
seqFecha$secuencia<-as.Date(seqFecha$secuencia)
dataEcdc<-sqldf('
select T1.*, T2.cases,T2.deaths from seqFecha as T1
left join dataEcdc as T2 on
T1.secuencia=T2.fecha
')
dataEcdc<-data.frame(dataEcdc %>% dplyr::select(dateRep=secuencia,cases,deaths))
dataEcdc <-
mutate(dataEcdc, deaths = ifelse(is.na(deaths), 0, deaths))
dataEcdc$cases[is.na(dataEcdc$cases)] <- 0
dataEcdc <- dataEcdc %>%
mutate(total_cases = cumsum(cases)) %>%
mutate(total_deaths = cumsum(deaths))
colnames(dataEcdc)[2] <- "new_cases"
colnames(dataEcdc)[3] <- "new_deaths"
dataEcdc <-
dataEcdc %>% filter(
dateRep <= diaActualizacion &
total_cases > 0
)
}
#### parametros epidemiológicos####
## Periodo preinfeccioso promedio (días)
periodoPreinfPromedio <- 5.84
## Duración media de la infecciosidad (días)
duracionMediaInf <- 4.8
## Porcentaje de casos severos
porcentajeCasosGraves <- 0.0328
## Porcentaje de casos críticos
porcentajeCasosCriticos <- 0.0054
## Días con síntomas antes de la hospitalización.
diasSintomasAntesHosp <- 7.12
## Días de hospitalización para casos severos.
diasHospCasosGraves <- 5.0
## Días de hospitalización para casos críticos.
diasHospCasosCriticos <- 23.0
## Días de la UCI para casos críticos
diasUCICasosCriticos <- 18.0
## Tasa letalidad
if (input$pais %in% paisesEdad)
{
load("DatosIniciales/ifr_age.RData")
data <- dataEcdc
lag <- 17
d_obs = data$new_deaths
d_obs_smooth = predict(loess(d_obs~seq(1,nrow(data)),span=.5)) # saco negativos
d_obs_smooth[d_obs_smooth<0] = 0
for (grupo in unique(ifr_age$grupedad))
{
assign(paste0("i_",grupo),eval(parse(text=paste0("data$",grupo,"_deaths/ifr_age$ifr[ifr_age$grupedad==grupo]"))))
}
# sumo grupos quinquenales para tener casos en 3 grupos
i00_19 = i_gr_00_09 + i_gr_10_14 + i_gr_15_19
i20_59 = i_gr_20_24 + i_gr_25_29 + i_gr_30_34 + i_gr_35_39 + i_gr_40_44 + i_gr_45_49 + i_gr_50_54 + i_gr_55_59
i60_mas = i_gr_60_64 + i_gr_65_69 + i_gr_70_74 + i_gr_75_79 + i_gr_80_84 + i_gr_85_89 + i_gr_90_
# suavizo
i_00_19_smooth <- c(predict(loess(i00_19[1:(hoy-lag)]~seq(1,(hoy-lag)),span=.5)),rep(0,lag))
i_20_59_smooth <- c(predict(loess(i20_59[1:(hoy-lag)]~seq(1,(hoy-lag)),span=.5)),rep(0,lag))
i_60_mas_smooth <- c(predict(loess(i60_mas[1:(hoy-lag)]~seq(1,(hoy-lag)),span=.5)),rep(0,lag))
# elimino negativos
i_00_19_smooth[i_00_19_smooth<0] <- 0
i_20_59_smooth[i_20_59_smooth<0] <- 0
i_60_mas_smooth[i_60_mas_smooth<0] <- 0
tasaLetalidadAjustada <- round(sum(d_obs_smooth)/(sum(i_00_19_smooth)+sum(i_20_59_smooth)+sum(i_60_mas_smooth)),digits=4)
} else {tasaLetalidadAjustada <- 0.0027}
## Días desde el primer informe hasta la dinámica de la muerte: nuevo modelo
diasPrimerInformeMuerte <- 7.0
## Tiempo desde el final de la incubación hasta la muerte.
diasIncubacionMuerte <- 3.0
## Retraso para el impacto de la política (días)
retrasoImpactoPolitica <- 3.0
# Camas generales atendidas enfermera por día / número de turnos
camasGeneralesEnfermeraDia <- 2.66667
## Las camas de la UCI atendieron a la enfermera por día / número de turnos
camasUCIEnfermerasDia <- 0.66667
## Camas generales atendidas por día médico / número de turnos
camasGeneralesMedicoDia <- 4.0
## Camas CC atendidas por día médico / número de turnos
camasCCMedicoDia <- 4.0
## Ventiladores por cama crítica
ventiladoresCamaCritica <- 0.654
## Cantidad de días de la proyección
cantidadDiasProyeccion <- 1000
## Día de inicio
diaInicio <- '2020-02-12'
## Expuestos
expuestos <- 1
## Infectados
infectados <- 1
## Recuperados
recuperados <- 0
## Población
poblacion<-as.numeric(poblacion_data$value[which(poblacion_data$indicator=='total' & poblacion_data$pais==input$pais)])
##### Recursos #####
# asigna recursos según país
recursos <- read.csv("recursos.csv",sep=";") %>% filter(pais==input$pais)
camasGenerales <- recursos[,"camasGenerales"]
camasCriticas <- recursos[,"camasCriticas"]
ventiladores <- recursos[,"ventiladores"]
enfermerasCamasGenerales <- recursos[,"enfermerasCamasGenerales"]
enfermerasCamasUCI <- recursos[,"enfermerasCamasUCI"]
medicosCamasGenerales <- recursos[,"medicosCamasGenerales"]
medicosCamasUCI <- recursos[,"medicosCamasUCI"]
porcentajeDisponibilidadCamasCOVID <- recursos[,"porcentajeDisponibilidadCamasCOVID"]
#### Actualizar ####
# obtiene función seir
source("seir.R", encoding = "UTF-8")
# paises con infectados segun porcentaje no detectado
paises_distintos <- c("ARG_18","CRI","SLV","JAM",
#"PRY",
"ARG_50","BHS","BLZ","BRB",
"GUY","HTI","NIC","SUR","TTO","VEN")
# valores por default de intervención. En actualización nunca aplica trigger
default=TRUE
trigger_Porc_crit=60
trigger_R_inter=0.9
Dias_interv=30
trigger_on_app=0
fechaIntervencionesTrigger = c()
# El R0 que ingreso al comienzo no es relevante debido que
# al actualizar se se calcula, siguiendo ritmo de observado
# escenario principal
seir_update <- seir(actualiza = T, vent=ventiladores,
tipo = ifelse(input$pais %in% paises_distintos,"B","A"),
hoy_date = hoy,
R0_usuario = data.frame(Comienzo=hoy,
Final=as.Date("2021-10-09"),
R.modificado=1.2))
modeloSimulado <- seir_update$modeloSimulado
# creo objetos para app
r_cori <- seir_update$r_cori
Rusuario <- data.frame(Comienzo = max(dataEcdc$dateRep),
Final = max(dataEcdc$dateRep)+420,
R.modificado=r_cori)
resumenResultados <- crea_tabla_rr(modeloSimulado = modeloSimulado)
crea_tabla_inputs()
# escenario hi
seir_update_hi <- seir(actualiza = T, variacion = .25,
tipo = ifelse(input$pais %in% paises_distintos,"B","A"),
hoy_date = hoy,
R0_usuario = data.frame(Comienzo=hoy,
Final=as.Date("2021-10-09"),
R.modificado=1.2))
modeloSimulado_hi <- seir_update_hi$modeloSimulado
# escenario low
seir_update_low <- seir(actualiza = T, variacion = -.25,
tipo = ifelse(input$pais %in% paises_distintos,"B","A"),
hoy_date = hoy,
R0_usuario = data.frame(Comienzo=hoy,
Final=as.Date("2021-10-09"),
R.modificado=1.2))
modeloSimulado_low <- seir_update_low$modeloSimulado
rm(seir_update)
rm(seir_update_hi)
rm(seir_update_low)
#### guarda conjunto de datos que serán levantados en la app####
save.image(paste0("DatosIniciales/DatosIniciales_",input$pais,".RData"))
print(paste0("Actualizado: ", input$pais))
}
shiny::runApp()
runApp()
hoy <<- diaActualizacion <<- as.Date("2021-01-15")
hoy <<- diaActualizacion <<- as.Date("2021-01-15")
library(dplyr)
url_oms <- "https://covid19.who.int/WHO-COVID-19-global-data.csv"
oms_data <- read.csv(url_oms, encoding = "UTF-8")
colnames(oms_data)[1]<-"Date_reported"
paises_oms <-
c(
"Argentina",
"Bahamas",
"Barbados",
"Belize",
"Bolivia (Plurinational State of)",
"Brazil",
"Chile",
"Colombia",
"Costa Rica",
"Dominican Republic",
"Ecuador",
"El Salvador",
"Guatemala",
"Guyana",
"Haiti",
"Honduras",
"Jamaica",
"Mexico",
"Nicaragua",
"Panama",
"Paraguay",
"Peru",
"Suriname",
"Trinidad and Tobago",
"Uruguay",
"Venezuela (Bolivarian Republic of)"
)
oms_data <- oms_data %>% filter(oms_data$Country %in% paises_oms)
oms_data$location <- as.character(oms_data$Country)
oms_data$location[oms_data$Country=="Argentina"]<-"ARG"
oms_data$location[oms_data$Country=="Bahamas"]<-"BHS"
oms_data$location[oms_data$Country=="Barbados"]<-"BRB"
oms_data$location[oms_data$Country=="Belize"]<-"BLZ"
oms_data$location[oms_data$Country=="Bolivia (Plurinational State of)"]<-"BOL"
oms_data$location[oms_data$Country=="Brazil"]<-"BRA"
oms_data$location[oms_data$Country=="Chile"]<-"CHL"
oms_data$location[oms_data$Country=="Colombia"]<-"COL"
oms_data$location[oms_data$Country=="Costa Rica"]<-"CRI"
oms_data$location[oms_data$Country=="Dominican Republic"]<-"DOM"
oms_data$location[oms_data$Country=="Ecuador"]<-"ECU"
oms_data$location[oms_data$Country=="El Salvador"]<-"SLV"
oms_data$location[oms_data$Country=="Guatemala"]<-"GTM"
oms_data$location[oms_data$Country=="Guyana"]<-"GUY"
oms_data$location[oms_data$Country=="Haiti"]<-"HTI"
oms_data$location[oms_data$Country=="Honduras"]<-"HND"
oms_data$location[oms_data$Country=="Jamaica"]<-"JAM"
oms_data$location[oms_data$Country=="Mexico"]<-"MEX"
oms_data$location[oms_data$Country=="Nicaragua"]<-"NIC"
oms_data$location[oms_data$Country=="Panama"]<-"PAN"
oms_data$location[oms_data$Country=="Paraguay"]<-"PRY"
oms_data$location[oms_data$Country=="Peru"]<-"PER"
oms_data$location[oms_data$Country=="Suriname"]<-"SUR"
oms_data$location[oms_data$Country=="Trinidad and Tobago"]<-"TTO"
oms_data$location[oms_data$Country=="Uruguay"]<-"URY"
oms_data$location[oms_data$Country=="Venezuela (Bolivarian Republic of)"]<-"VEN"
oms_data$Date_reported<-as.character(oms_data$Date_reported)
oms_data <-
oms_data %>% dplyr::select(
iso_code = location,
location = Country,
date = Date_reported,
total_cases = Cumulative_cases,
new_cases = New_cases,
total_deaths = Cumulative_deaths,
new_deaths = New_deaths
) %>% filter(oms_data$Date_reported<=hoy)
save(oms_data,file="DatosIniciales/oms_data.RData")
View(oms_data)
runApp()
get_dias_dupl <- function(data, hoy, ventana = 7){
# data
df <- data %>%
dplyr::select(date,total_cases)%>%
mutate(date = as.Date(date)) %>%
filter(date %in% seq(as.Date(hoy)-ventana, as.Date(hoy)-1, by="day")) %>%
right_join(data.frame(date=seq(as.Date(hoy)-ventana, as.Date(hoy)-1, by="day"))) %>%
fill(total_cases, .direction = "up") %>%
fill(total_cases, .direction = "down") %>%
arrange(date) %>%
mutate(dia = 1:ventana,
acumulados = total_cases, # casos acumulados
log.acumulados = log(acumulados)) %>%
dplyr::select(dia, acumulados, log.acumulados)
# reg lineal de crecim exp
reglin <- lm(df, formula = log.acumulados ~ dia)
B1 = as.numeric(reglin$coefficients[2])
errorB1 <- summary(reglin)$coef[2, 2]
# media e ICs 95%
diasDup = log(2) / c(B1, B1-1.96*errorB1, B1+1.96*errorB1)
return(diasDup)
}
owd_data
load("C:/modelocovid19/DatosIniciales/owd_data.RData")
owd_data
View(owd_data)
hoy <<- diaActualizacion <<- as.Date("2021-01-15")
library(tidyverse)
library(sqldf)
library(tidyr)
library(dplyr)
# vector paises
paises <-c("ARG","BOL","BRA","CHL","COL","CRI","SLV",
"ECU","GTM","HND","JAM","MEX","PAN","PRY","PER","DOM","URY","ARG_2","ARG_18","ARG_3","ARG_7", "ARG_50", "ARG_6_756", "ARG_6_826", "ARG_6",
"BHS", "BRB", "BLZ", "GUY", "HTI", "NIC", "SUR", "TTO", "VEN")
# get data
# Our World In Data. Deaths and Cases from ECDC
owd_data <- read.csv("https://covid.ourworldindata.org/data/owid-covid-data.csv",header = T) %>%
dplyr::select(iso_code, location,
date,
total_cases, new_cases,
total_deaths, new_deaths,
total_tests, new_tests,
total_tests_per_thousand, new_tests_per_thousand,new_tests_smoothed_per_thousand,
stringency_index,
population,
population_density,
aged_65_older,
life_expectancy) %>%
filter(iso_code %in% paises,
as.Date(date) <= as.Date(hoy))
#agrega datos subnacionales de Argentina
dataMsal<-read.csv("Covid19Casos.csv", encoding = "UTF-8")
dataMsal<-dataMsal %>% dplyr::filter(fecha_diagnostico>="2020-03-01")
dataMsal<-dataMsal %>% filter(clasificacion_resumen=="Confirmado")
dataMsalARG<-dataMsal
dataMsalARG$residencia_provincia_id<-"0"
dataMsalARG$residencia_provincia_nombre<-"Argentina"
dataMsal_6_756<-dataMsal %>% dplyr::filter(residencia_provincia_id==6 & residencia_departamento_id==756)
dataMsal_6_756$residencia_provincia_id<-"6_756"
dataMsal_6_756$residencia_provincia_nombre<-"Buenos Aires - Partido de San Isidro"
dataMsal_6_826<-dataMsal %>% dplyr::filter(residencia_provincia_id==6 & residencia_departamento_id==826)
dataMsal_6_826$residencia_provincia_id<-"6_826"
dataMsal_6_826$residencia_provincia_nombre<-"Buenos Aires - Partido de Trenque Lauquen"
deptosAmba<-c(28,
35,
91,
98,
119,
126,
134,
245,
252,
260,
266,
270,
274,
329,
364,
371,
408,
410,
412,
427,
441,
434,
490,
497,
515,
525,
539,
560,
568,
638,
648,
658,
749,
756,
760,
778,
805,
840,
861,
882)
dataMsalAmba<-dataMsal %>% filter(residencia_provincia_id==2 |
residencia_provincia_id==6 &
residencia_departamento_id %in% (deptosAmba))
dataMsalAmba$residencia_provincia_id<-as.character(dataMsalAmba$residencia_provincia_id)
dataMsal$residencia_provincia_id<-as.character(dataMsal$residencia_provincia_id)
dataMsalAmba$residencia_provincia_id<-"3"
dataMsalAmba$residencia_provincia_nombre<-"AMBA"
dataMsalAmbaPBA<-dataMsal %>% filter(residencia_provincia_id==6 &
residencia_departamento_id %in% (deptosAmba))
dataMsalAmbaPBA$residencia_provincia_id<-as.character(dataMsalAmbaPBA$residencia_provincia_id)
dataMsalAmbaPBA$residencia_provincia_id<-"7"
dataMsalAmbaPBA$residencia_provincia_nombre<-"Argentina - Buenos Aires (Partidos del AMBA)"
dataMsal<-union_all(dataMsal,dataMsalAmba)
dataMsal<-union_all(dataMsal,dataMsalAmbaPBA)
dataMsal<-union_all(dataMsal,dataMsalARG)
dataMsal<-union_all(dataMsal,dataMsal_6_756)
dataMsal<-union_all(dataMsal,dataMsal_6_826)
dataMsal<-sqldf('
select distinct "cases" as tipo,
fecha_diagnostico as dateRep,
residencia_provincia_nombre as countriesAndTerritories,
"ARG_" || residencia_provincia_id as countryterritoryCode,
sum(case
when clasificacion_resumen="Confirmado" then 1 else 0 end) as count
from dataMsal
where fecha_diagnostico <> "" and residencia_provincia_nombre <> "SIN ESPECIFICAR"
group by fecha_diagnostico,
residencia_provincia_nombre
union all
select distinct "deaths" as tipo,
fecha_fallecimiento as dateRep,
residencia_provincia_nombre as countriesAndTerritories,
"ARG_" || residencia_provincia_id as countryterritoryCode,
sum(case
when clasificacion_resumen="Confirmado" then 1 else 0 end and fallecido="SI") as count
from dataMsal
where fecha_diagnostico <> "" and residencia_provincia_nombre <> "SIN ESPECIFICAR"
group by fecha_fallecimiento,
residencia_provincia_nombre
')
combinaciones=list(unique(dataMsal$tipo),
seq(as.Date(first(dataMsal$dateRep)),as.Date(last(dataMsal$dateRep)),by=1),
unique(dataMsal$countryterritoryCode))
df_full<-data.frame(expand.grid(combinaciones)) %>% arrange(Var1,Var2)
colnames(df_full) <- c("tipo","dateRep","countryterritoryCode")
dataMsal<-merge(df_full, dataMsal, all.x = TRUE) %>% arrange(tipo,countriesAndTerritories,dateRep)
dataMsal<-dataMsal %>% arrange(dateRep, countryterritoryCode)
dataMsal$count[is.na(dataMsal$count)]<-0
dataMsal$countriesAndTerritories <- NULL
dataMsal$tipo <- as.character(dataMsal$tipo)
dataMsal$dateRep <- as.character(dataMsal$dateRep)
dataMsal$countryterritoryCode <- as.character(dataMsal$countryterritoryCode)
dataMsal<-dataMsal %>% filter(countryterritoryCode %in% paises & dateRep<=hoy)
dataMsal<-spread(dataMsal, tipo, count) %>% filter(dateRep!="") %>% arrange(countryterritoryCode, dateRep)
dataMsal$dateRep<-as.Date(dataMsal$dateRep)
dataMsal[is.na(dataMsal)] <- 0
dataMsal<-dataMsal %>% group_by(countryterritoryCode) %>% dplyr::mutate(total_cases=cumsum(cases),total_deaths=cumsum(deaths))
dataMsal$location<-""
dataMsal$total_tests<-as.numeric(NA)
dataMsal$new_tests<-as.numeric(NA)
dataMsal$total_tests_per_thousand<-as.numeric(NA)
dataMsal$new_tests_per_thousand<-as.numeric(NA)
dataMsal$new_tests_smoothed_per_thousand<-as.numeric(NA)
dataMsal$stringency_index<-as.numeric(NA)
dataMsal$population<-as.numeric(NA)
dataMsal$population_density<-as.numeric(NA)
dataMsal$aged_65_older<-as.numeric(NA)
dataMsal$life_expectancy<-as.numeric(NA)
dataMsal<-
dataMsal %>% dplyr::select(
iso_code=countryterritoryCode,
location=location,
date=dateRep,
total_cases,
new_cases=cases,
total_deaths,
new_deaths=deaths,
total_tests,
new_tests,
total_tests_per_thousand,
new_tests_per_thousand,
new_tests_smoothed_per_thousand,
stringency_index,
population,
population_density,
aged_65_older,
life_expectancy
)
dataMsal$date<-as.character(dataMsal$date)
dataMsal<-dataMsal %>% filter(date<=hoy)
dataMsal$location[dataMsal$iso_code=="ARG_2"]<-"Argentina - Ciudad Autónoma de Buenos Aires"
dataMsal$population[dataMsal$iso_code=="ARG_2"]<-3075643
dataMsal$aged_65_older[dataMsal$iso_code=="ARG_2"]<-16.43
dataMsal$life_expectancy[dataMsal$iso_code=="ARG_2"]<-79
dataMsal$location[dataMsal$iso_code=="ARG_18"]<-"Argentina - Corrientes"
dataMsal$population[dataMsal$iso_code=="ARG_18"]<-1120801
dataMsal$aged_65_older[dataMsal$iso_code=="ARG_18"]<-9.84
dataMsal$life_expectancy[dataMsal$iso_code=="ARG_18"]<-78
dataMsal<-data.frame(dataMsal)
dataMsal$location[dataMsal$iso_code=="ARG_3"]<-"Argentina - AMBA"
dataMsal$population[dataMsal$iso_code=="ARG_3"]<-16706015
dataMsal$aged_65_older[dataMsal$iso_code=="ARG_3"]<-11.94
dataMsal$life_expectancy[dataMsal$iso_code=="ARG_3"]<-0
dataMsal$location[dataMsal$iso_code=="ARG_7"]<-"Argentina - Buenos Aires (Partidos del AMBA)"
dataMsal$population[dataMsal$iso_code=="ARG_7"]<-13630369
dataMsal$aged_65_older[dataMsal$iso_code=="ARG_7"]<-10.92
dataMsal$life_expectancy[dataMsal$iso_code=="ARG_7"]<-0
dataMsal$location[dataMsal$iso_code=="ARG_50"]<-"Argentina - Mendoza"
dataMsal$population[dataMsal$iso_code=="ARG_50"]<-1990338
dataMsal$aged_65_older[dataMsal$iso_code=="ARG_50"]<-12.89
dataMsal$life_expectancy[dataMsal$iso_code=="ARG_50"]<-79
owd_data<-union_all(owd_data,dataMsal)
rm(dataMsal)
rm(dataMsalAmba)
rm(dataMsalAmbaPBA)
rm(dataMsalARG)
rm(dataMsal_6_756)
rm(dataMsal_6_826)
rm(combinaciones)
rm(df_full)
# guarda input folder
# setwd("appTest")
save(owd_data, file =  "DatosIniciales/owd_data.RData")
# graphs
# gt <- owd_data %>% filter(as.Date(date) > as.Date("2020-03-01")) %>%
#               dplyr::select(pais=location, date, total_tests_per_thousand) %>%
#               ggplot()+ geom_step(aes(as.Date(date),
#                                       as.integer(total_tests_per_thousand)))+
#               labs(x="Fecha", y="Test/Hab")+
#               theme_minimal() +
#               ggtitle("Test realizados (acum) cada 1000 hab.") +
#               facet_wrap(~pais)
# gsi <- owd_data %>% filter(as.Date(date) > as.Date("2020-03-01")) %>%
#               dplyr::select(pais=iso_code, date, stringency_index) %>%
#               ggplot()+ geom_step(aes(as.Date(date),
#                                       as.numeric(stringency_index),
#                                       color=pais))+
#               labs(x="Fecha", y="Stringency Index")+
#               theme_minimal() +
#               ggtitle("Stringency Index")+
#               facet_wrap(~pais)
#               # ggplot2::annotate("text",x = as.Date("2020-05-01"),
#               #                   y = 30,label="Government Response Stringency Index: composite
#               #                   measure based on 9 response indicators including
#               #                   school closures, workplace closures, and travel bans,
#               #                   rescaled to a value from 0 to 100 (100 = strictest response)")
load("C:/modelocovid19/DatosIniciales/owd_data.RData")
View(owd_data)
